diff --git a/drivers/net/ethernet/wiznet/w5100.c b/drivers/net/ethernet/wiznet/w5100.c
index 634946e87e5f..d1b2daf8148f 100644
--- a/drivers/net/ethernet/wiznet/w5100.c
+++ b/drivers/net/ethernet/wiznet/w5100.c
@@ -126,6 +126,10 @@ MODULE_LICENSE("GPL");
  */
 #define W5500_SIMR		0x0018 /* Socket Interrupt Mask Register */
 #define W5500_RTR		0x0019 /* Retry Time-value Register */
+#define W5500_PHYCFGR	0x002e /* Configuration Register */
+
+#define PHYCFGR_LINK_STATUS	(1 << 0) /* Link status */
+
 
 #define W5500_S0_REGS		0x10000
 
@@ -139,6 +143,8 @@ MODULE_LICENSE("GPL");
 #define W5500_RX_MEM_START	0x30000
 #define W5500_RX_MEM_SIZE	0x04000
 
+#define W5500_CHECK_LINK_TIMEOUT_MS	1000
+
 /*
  * Device driver private data structure
  */
@@ -170,8 +176,13 @@ struct w5100_priv {
 	struct work_struct tx_work;
 	struct work_struct setrx_work;
 	struct work_struct restart_work;
+
+	struct timer_list check_link_timer;
+	struct work_struct check_link_work;
+	int link_is_up;
 };
 
+
 /************************************************************************
  *
  *  Lowlevel I/O functions
@@ -725,6 +736,16 @@ static void w5100_get_drvinfo(struct net_device *ndev,
 		sizeof(info->bus_info));
 }
 
+static int w5500_get_link(struct w5100_priv *priv) {
+	int phycfgr;
+	int link_is_up;
+
+	phycfgr = w5100_read(priv, W5500_PHYCFGR);
+	link_is_up = phycfgr & PHYCFGR_LINK_STATUS;
+
+	return link_is_up;
+}
+
 static u32 w5100_get_link(struct net_device *ndev)
 {
 	struct w5100_priv *priv = netdev_priv(ndev);
@@ -732,7 +753,7 @@ static u32 w5100_get_link(struct net_device *ndev)
 	if (gpio_is_valid(priv->link_gpio))
 		return !!gpio_get_value(priv->link_gpio);
 
-	return 1;
+	return priv->link_is_up == 1 ? 1 : 0;
 }
 
 static u32 w5100_get_msglevel(struct net_device *ndev)
@@ -990,6 +1011,42 @@ static int w5100_set_macaddr(struct net_device *ndev, void *addr)
 	return 0;
 }
 
+static void w5500_check_link_work(struct work_struct *work)
+{
+	struct w5100_priv *priv = container_of(work, struct w5100_priv,
+					       check_link_work);
+	struct net_device *ndev = priv->ndev;
+	int link_is_up = w5500_get_link(priv);
+
+	if (netif_running(ndev)) {
+		if (link_is_up) {
+			if (priv->link_is_up == 0 || priv->link_is_up == -1) {
+				printk(KERN_INFO "link up\n");
+				priv->link_is_up = 1;
+				netif_info(priv, link, ndev, "link is up\n");
+				netif_carrier_on(ndev);
+			}
+		} else {
+			if (priv->link_is_up == 1 || priv->link_is_up == -1) {
+				printk(KERN_INFO "link down\n");
+				priv->link_is_up = 0;
+				netif_info(priv, link, ndev, "link is down\n");
+				netif_carrier_off(ndev);
+			}
+		}
+	}
+}
+
+static void w5500_check_link_timer_callback(struct timer_list *t)
+{
+	struct w5100_priv *priv = from_timer(priv, t, check_link_timer);
+
+	schedule_work(&priv->check_link_work);
+
+    mod_timer(&priv->check_link_timer,
+			  jiffies + msecs_to_jiffies(W5500_CHECK_LINK_TIMEOUT_MS));
+}
+
 static int w5100_open(struct net_device *ndev)
 {
 	struct w5100_priv *priv = netdev_priv(ndev);
@@ -998,9 +1055,19 @@ static int w5100_open(struct net_device *ndev)
 	w5100_hw_start(priv);
 	napi_enable(&priv->napi);
 	netif_start_queue(ndev);
-	if (!gpio_is_valid(priv->link_gpio) ||
-	    gpio_get_value(priv->link_gpio) != 0)
-		netif_carrier_on(ndev);
+
+	priv->link_is_up = -1;
+
+	if (gpio_is_valid(priv->link_gpio)) {
+	    if (gpio_get_value(priv->link_gpio) != 0)
+			netif_carrier_on(ndev);
+	} else {
+		if (priv->ops->chip_id == W5500) {
+			mod_timer(&priv->check_link_timer,
+					  jiffies + msecs_to_jiffies(W5500_CHECK_LINK_TIMEOUT_MS));
+		}
+	}
+
 	return 0;
 }
 
@@ -1008,6 +1075,8 @@ static int w5100_stop(struct net_device *ndev)
 {
 	struct w5100_priv *priv = netdev_priv(ndev);
 
+	del_timer(&priv->check_link_timer);
+	priv->link_is_up = -1;
 	netif_info(priv, ifdown, ndev, "shutting down\n");
 	w5100_hw_close(priv);
 	netif_carrier_off(ndev);
@@ -1198,6 +1267,11 @@ int w5100_probe(struct device *dev, const struct w5100_ops *ops,
 			priv->link_gpio = -EINVAL;
 	}
 
+	INIT_WORK(&priv->check_link_work, w5500_check_link_work);
+	timer_setup(&priv->check_link_timer,
+				w5500_check_link_timer_callback, 0);
+	priv->link_is_up = -1;
+
 	return 0;
 
 err_gpio:
@@ -1217,6 +1291,8 @@ void w5100_remove(struct device *dev)
 	struct net_device *ndev = dev_get_drvdata(dev);
 	struct w5100_priv *priv = netdev_priv(ndev);
 
+	del_timer(&priv->check_link_timer);
+
 	w5100_hw_reset(priv);
 	free_irq(priv->irq, ndev);
 	if (gpio_is_valid(priv->link_gpio))
@@ -1224,6 +1300,7 @@ void w5100_remove(struct device *dev)
 
 	flush_work(&priv->setrx_work);
 	flush_work(&priv->restart_work);
+	flush_work(&priv->check_link_work);
 	destroy_workqueue(priv->xfer_wq);
 
 	unregister_netdev(ndev);
@@ -1237,6 +1314,9 @@ static int w5100_suspend(struct device *dev)
 	struct net_device *ndev = dev_get_drvdata(dev);
 	struct w5100_priv *priv = netdev_priv(ndev);
 
+	del_timer(&priv->check_link_timer);
+	priv->link_is_up = -1;
+
 	if (netif_running(ndev)) {
 		netif_carrier_off(ndev);
 		netif_device_detach(ndev);
@@ -1256,10 +1336,19 @@ static int w5100_resume(struct device *dev)
 		w5100_hw_start(priv);
 
 		netif_device_attach(ndev);
-		if (!gpio_is_valid(priv->link_gpio) ||
-		    gpio_get_value(priv->link_gpio) != 0)
-			netif_carrier_on(ndev);
+
+		priv->link_is_up = -1;
+		if (gpio_is_valid(priv->link_gpio)) {
+			if (gpio_get_value(priv->link_gpio) != 0)
+				netif_carrier_on(ndev);
+		} else {
+			if (priv->ops->chip_id == W5500) {
+				mod_timer(&priv->check_link_timer,
+					jiffies + msecs_to_jiffies(W5500_CHECK_LINK_TIMEOUT_MS));
+			}
+		}
 	}
+
 	return 0;
 }
 #endif /* CONFIG_PM_SLEEP */
